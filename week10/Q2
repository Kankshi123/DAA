#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct Task {
    int index;
    int time;
    int deadline;
};
bool compare(Task a, Task b) {
    return a.deadline < b.deadline;
}
int maxTasksCompleted(int n, vector<int>& times, vector<int>& deadlines) {
    vector<Task> tasks(n);
    for (int i = 0; i < n; ++i) {
        tasks[i] = {i + 1, times[i], deadlines[i]}; 
    }
    sort(tasks.begin(), tasks.end(), compare);
    int completedTasks = 0;
    int currentTime = 0;
    for (const auto& task : tasks) {
        if (currentTime + task.time <= task.deadline) {
            completedTasks++;
            currentTime += task.time;
        }
    }
    return completedTasks;
}
int main() {
    int n;
    cin >> n;
    vector<int> times(n);
    vector<int> deadlines(n);
    for (int i = 0; i < n; ++i) {
        cin >> times[i];
    }
    for (int i = 0; i < n; ++i) {
        cin >> deadlines[i];
    }
    int maxCompletedTasks = maxTasksCompleted(n, times, deadlines);
    cout << "Maximum number of tasks completed: " << maxCompletedTasks << endl;
    return 0;
}
